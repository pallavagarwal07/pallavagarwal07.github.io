<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://www.varstack.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.varstack.com/" rel="alternate" type="text/html" /><updated>2016-08-16T10:35:11+05:30</updated><id>http://www.varstack.com/</id><title>Something new you wish to know</title><subtitle></subtitle><entry><title>Learning from mistakes: Bugzilla Landfills</title><link href="http://www.varstack.com/2016/06/09/Bugzilla-Landfills/" rel="alternate" type="text/html" title="Learning from mistakes: Bugzilla Landfills" /><published>2016-06-09T00:00:00+05:30</published><updated>2016-06-09T00:00:00+05:30</updated><id>http://www.varstack.com/2016/06/09/Bugzilla-Landfills</id><content type="html" xml:base="http://www.varstack.com/2016/06/09/Bugzilla-Landfills/">&lt;p&gt;This post is regarding a recent incident that happened when I was working for
my project in Google Summer of Code.&lt;/p&gt;

&lt;p&gt;My day&#39;s task was to automate the filing of a bug in bugzilla if and when a
build fails. Though, not too hard, it would obviously require testing, because
I can&#39;t just assume that my code would work the way it is supposed to.&lt;/p&gt;

&lt;p&gt;This didn&#39;t seem like much of a problem at that time. What I decided to do was,
test on a single bug and delete it when I&#39;m done. Simple Enough?&lt;/p&gt;

&lt;p&gt;As it turns out, it wasn&#39;t so simple. And I would&#39;ve known that, had I done a
bit of a research. You see, once a bug is reported, it can be edited, yet
closing, or deleting the bug is something only the administrators are capable
of. So, by creating a bug in bugzilla I inadvertantly sent an email about a
bug to numerous people.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Thanks for reading&lt;/i&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="gsoc" /><summary>This post is regarding a recent incident that happened when I was working for
my project in Google Summer of Code.</summary></entry><entry><title>Determining legal USE Flag combinations using a CNF SAT Solver</title><link href="http://www.varstack.com/2016/05/13/SAT-Solver/" rel="alternate" type="text/html" title="Determining legal USE Flag combinations using a CNF SAT Solver" /><published>2016-05-13T00:00:00+05:30</published><updated>2016-05-13T00:00:00+05:30</updated><id>http://www.varstack.com/2016/05/13/SAT-Solver</id><content type="html" xml:base="http://www.varstack.com/2016/05/13/SAT-Solver/">&lt;p&gt;I spent my time doing something rather interesting today.&lt;/p&gt;

&lt;p&gt;In my proposal, I had
mentioned that the USE flag combinations to be tested would be:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Without any USE flag turned on&lt;/p&gt;

&lt;p&gt;With all USE flags turned on&lt;/p&gt;

&lt;p&gt;Few random combinations based on default flags,
or inverse of default flags or those generated by tatt.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yesterday, a guy, Harald Timeraider pointed out that some of the USE flag combinations
given by the above rules may not be legal. For example, if an ebuild specifies
&lt;code&gt;REQUIRED_USE=&quot;^^ (a b c)&quot;&lt;/code&gt; then EXACTLY one flag out of &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; should be
enabled. This doesn&#39;t fall under &quot;without USE flags&quot; or &quot;with all USE flags&quot; category.&lt;/p&gt;

&lt;p&gt;At first I was thinking that for combination os USE flags, I would use the portage API
to verify if the USE flag combo was valid and is not, I would randomly generate another
combination. But soon, as it always happens, I began to overthink the problem and
decided to model the problem as a graph problem. More specifically, as a boolean
satisfiability problem.&lt;/p&gt;

&lt;p&gt;So, long story short, here&#39;s what I did at
&lt;a href=&quot;https://github.com/pallavagarwal07/SummerOfCode16/blob/master/satsolver/solver.py&quot;&gt;https://github.com/pallavagarwal07/SummerOfCode16/blob/master/satsolver/solver.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have five main kinds of operators.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;|| (flag1 flag2 flag3..)&lt;/code&gt; operator means that the following bracket would need to have AT LEAST one flag
enabled. This is a simple OR operator between the operands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flag1? (flag2 flag3 ...)&lt;/code&gt; operator means that the following bracket would have to be
true as a whole if &lt;code&gt;flag1&lt;/code&gt; is enabled. This is equivalent to the implication operator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;^^ (flag1 flag2 flag3..)&lt;/code&gt; operator means that the following bracket will have
EXACTLY one flag enabled. The wiki describes it as an XOR operator, which I believe is
inaccurate since XOR should allow odd number of operands to be true. For my case, I
model it as a 1-from-n operation. For example, for three variables &lt;code&gt;a, b, c&lt;/code&gt;:&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;center&gt;&lt;code&gt;(a &amp; !b &amp; !c) | (!a &amp; b &amp; !c) | (!a &amp; !b &amp; c)&lt;/code&gt;&lt;/center&gt;


&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;!flag1&lt;/code&gt; operator is basically a negation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flag1 flag2&lt;/code&gt; operator (whitespace) is basically an AND operation unless the parent
bracket is preceded by &lt;code&gt;||&lt;/code&gt; or &lt;code&gt;^^&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Also, because I was having fun and wasn&#39;t sure if Portage supported it, I added support
for arbitrary amount of nesting, given that the above rules are all followed.&lt;/p&gt;

&lt;p&gt;The code I wrote uses &lt;code&gt;satispy&lt;/code&gt; to convert constructed SAT formula into CNF form, and
replaces variables by numbers to convert into a format that &lt;code&gt;pycosat&lt;/code&gt; can accept.&lt;/p&gt;

&lt;p&gt;Even though &lt;code&gt;satispy&lt;/code&gt; also has support for solving the CNF formula, I went with &lt;code&gt;pycosat&lt;/code&gt;
for actually solving the CNF formula because it provides an iterator to get as many
solutions as I want. Also the output is a bit easier on the eyes in the form of numbers.&lt;/p&gt;

&lt;p&gt;If you have any queries, post them below or open up an issue on github.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Thanks for reading&lt;/i&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="gsoc" /><summary>I spent my time doing something rather interesting today.</summary></entry><entry><title>Reference Sheets and Useful Links</title><link href="http://www.varstack.com/2016/05/13/Reference-Sheets-and-Useful-Links/" rel="alternate" type="text/html" title="Reference Sheets and Useful Links" /><published>2016-05-13T00:00:00+05:30</published><updated>2016-05-13T00:00:00+05:30</updated><id>http://www.varstack.com/2016/05/13/Reference-Sheets-and-Useful-Links</id><content type="html" xml:base="http://www.varstack.com/2016/05/13/Reference-Sheets-and-Useful-Links/">&lt;p&gt;This post was long due. I often find blog posts, reference sheets and useful links that
I feel I should bookmark. However, I often lose these bookmarks when I shift Operating
Systems or browsers (which happens very often). I am hoping that this will be a better
and a more reliable way to keep track of all these resources.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://python-future.org/compatible_idioms.html&quot;&gt;Python Future&lt;/a&gt;: This is a brilliant
cheat sheat to write cross compatible code for both PYTHON-2 and PYTHON-3&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="tagged" /><summary>This post was long due. I often find blog posts, reference sheets and useful links that
I feel I should bookmark. However, I often lose these bookmarks when I shift Operating
Systems or browsers (which happens very often). I am hoping that this will be a better
and a more reliable way to keep track of all these resources.</summary></entry><entry><title>Ultimate control over Mobile Browser with Firefox</title><link href="http://www.varstack.com/2016/05/06/Ultimate-control-over-mobile-browser/" rel="alternate" type="text/html" title="Ultimate control over Mobile Browser with Firefox" /><published>2016-05-06T00:00:00+05:30</published><updated>2016-05-06T00:00:00+05:30</updated><id>http://www.varstack.com/2016/05/06/Ultimate-control-over-mobile-browser</id><content type="html" xml:base="http://www.varstack.com/2016/05/06/Ultimate-control-over-mobile-browser/">&lt;p&gt;It is no secret that I love firefox. Even though sometimes, it can run a bit slower than
Chrome, Firefox has always provided me with better developer tools and better control
over all of my settings, even those which are usually unavailable via &lt;code&gt;about:config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it was only recently that I discovered, that &lt;code&gt;about:config&lt;/code&gt; works flawlessly
on the mobile version of the firefox browser too. That means, all of the features you&#39;d
think that mobile browsers miss, like proxy settings, cache, pipelining settings, etc.
can be found just by typing &lt;code&gt;about:config&lt;/code&gt; on the URL.&lt;/p&gt;

&lt;p&gt;Before you go off try, and fail - note that you need to understand how some of those
settings play together. For example, to set proxy settings, the URLs and the ports
themselves aren&#39;t enough. The &lt;code&gt;network.proxy.type&lt;/code&gt; needs to be set to 2 (which is the
equivalent of the menu option &quot;Manual proxy configuration&quot;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="tip" /><summary>It is no secret that I love firefox. Even though sometimes, it can run a bit slower than
Chrome, Firefox has always provided me with better developer tools and better control
over all of my settings, even those which are usually unavailable via about:config.</summary></entry><entry><title>SSH port forwarding and some cool uses</title><link href="http://www.varstack.com/2016/05/06/SSH-port-forwarding-and-some-cool-uses/" rel="alternate" type="text/html" title="SSH port forwarding and some cool uses" /><published>2016-05-06T00:00:00+05:30</published><updated>2016-05-06T00:00:00+05:30</updated><id>http://www.varstack.com/2016/05/06/SSH-port-forwarding-and-some-cool-uses</id><content type="html" xml:base="http://www.varstack.com/2016/05/06/SSH-port-forwarding-and-some-cool-uses/">&lt;p&gt;I&#39;ll begin with some of the bare minimum and absolutely amazing things ssh port
forwarding is capable of, and see if I can convert this to a proper blog post
later.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;1. Local port forwarding&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -L8081:example.com:80 pallav@myserver.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Meaning: Opens a SSH connection to myserver.com, and forward all requests to &lt;strong&gt;my&lt;/strong&gt; port 8081
to port 80 (default http port) of example.com &lt;em&gt;via&lt;/em&gt; myserver. Thus, if example.com is blocked
on my PC, but it can be accessed by some other PC which I have ssh access to, then I can use
this command to gain access to the blocked website (The website is now accessible on
localhost:8081 in my browser). Also, ssh connections are encrypted, so the only thing ISP sees
is an open connection to myserver, and not the website I&#39;m trying to access.
Unfortunately, many websites you see day to day check the hostname of request (which
would be localhost) and won&#39;t work this way. However, this trick is great to forward
SSH connections over multiple hops. (For bypassing website restrictions, read on)&lt;/p&gt;

&lt;p&gt;Apart from this, you can forward any arbitrary port data to any arbitrary port, from
this point, only thing stopping you is your imagination.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;2. Remote port forwarding&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -R8081:example.com:22 pallav@myserver.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is extremely similar to local port forwarding, which is why it causes a lot of
people confusion. In previous case, the port being mapped was on local machine and the
request was being sent to example.com via remote server. In this case, the port being
mapped is on the remote server, while the request being sent is from local computer.
Get the difference? Good.&lt;/p&gt;

&lt;p&gt;This is typically used if the local computer doesn&#39;t have a public IP address, and you
need access to it from outside. In that case, something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -R8081:localhost:22 pallav@myserver.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would give ssh access to (previously publically unaccessible) local PC via port 8081 of
remote server.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;3. Dynamic port forwarding&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -D8081 pallav@myserver.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In local port forwarding, we were restricted to forwarding request to a particular port
of example.com. But what if we want the requests to reach different destinations, on
different ports? By the above command, the port 8081 on localhost is dynamically mapped
such that, localhost:8081 can be used as a socks proxy for any request. Thus, this means
you can use remote server as a free VPN, by using the above command, and then setting
localhost:8081 as the socks proxy in the browser (leave other fields empty).&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Quiz time&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Let&#39;s say you are in a hotel that has free wifi. But like every hotel, once you connect
to the wifi, it redirects you to the login page, which only allows one login per room
☹. But you are a hacker, and decide to share the connection with you brother, who also
has a laptop. What do you do?&lt;/p&gt;

&lt;div class=&quot;spoiler&quot;&gt;Turn on sshd service on one laptop (whichever one logins to internet)
Use the other laptop to ssh into this one using local ip address (shown in ifconfig)
. While SSHing, set up dynamic port forwarding. Now internet is accessible via
socks proxy through the tunnel.&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="post" /><summary>I&#39;ll begin with some of the bare minimum and absolutely amazing things ssh port
forwarding is capable of, and see if I can convert this to a proper blog post
later.</summary></entry><entry><title>Google Summer of Code with Gentoo</title><link href="http://www.varstack.com/2016/04/30/Google-Summer-of-Code-with-Gentoo/" rel="alternate" type="text/html" title="Google Summer of Code with Gentoo" /><published>2016-04-30T00:00:00+05:30</published><updated>2016-04-30T00:00:00+05:30</updated><id>http://www.varstack.com/2016/04/30/Google-Summer-of-Code-with-Gentoo</id><content type="html" xml:base="http://www.varstack.com/2016/04/30/Google-Summer-of-Code-with-Gentoo/">&lt;p&gt;I am excited to say that I&#39;ve been accepted for this year&#39;s summer of code under
Gentoo Organisation. &lt;a href=&quot;/gsoc&quot;&gt;This section of the blog&lt;/a&gt; will be dedicated to documenting
anything and everything I learn that is interesting or remotely related to my project.&lt;/p&gt;

&lt;p&gt;My proposal for the project can be found &lt;a href=&quot;/img/gsoc.pdf&quot;&gt;here&lt;/a&gt;. The abstract for the
same has been given below.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Gentoo is an operating system with extreme focus on configurability and performance.
To provide fully customizable experience, without interfering with the stability of
the system, Gentoo has a concept of masked packages. These masked packages (or
versions) are either untested, or are known to be unstable and are installed only if
the user explicitly unmasks them. While this concept is a boon to the stability of
the operating system, the current implementation requires the packages to be tested
manually by a team of developers. This significantly increases the time in which new
packages are made safely available to the users. The goal of this project is to
provide a mechanism to test and stabilize the packages automatically with little or
no human intervention.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The first phase of summer of code is the community bonding period (April 23rd - May 22nd)
, which has already started. The first and foremosts tasks for now (community bonding)
are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get familiar with architecture testing.&lt;/li&gt;
&lt;li&gt;Contact people who can give suggestion on my project.&lt;/li&gt;
&lt;li&gt;Create a plan of action for the coding period, by taking the suggestions into account
with the current plans.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For the first, architecture testing, I tested and stabilized a new version of gitflow a
few days ago.  The package itself was small, with no complicated dependencies and was
easy enough to handle. But since, my project also aims to create a platform for
maintainers to create automated test scripts, I had been thinking of ways to implement
that.&lt;/p&gt;

&lt;p&gt;I have also been following Agostino&#39;s (Ago&#39;s) &lt;a href=&quot;https://blogs.gentoo.org/ago/&quot;&gt;blog&lt;/a&gt; for
rules/tips pertaining to architecture testing, specifically for the more difficult to
test things like Kernel, libraries, kernel dependent packages (like virtualbox) etc.&lt;/p&gt;

&lt;p&gt;Lastly, I&#39;ve been looking at the source of package management and testing related tools
in Gentoo, including tatt and eix.&lt;/p&gt;

&lt;p&gt;I would keep on updating this page with more information as I find it.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Thanks for reading&lt;/i&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="gsoc" /><summary>I am excited to say that I&#39;ve been accepted for this year&#39;s summer of code under
Gentoo Organisation. This section of the blog will be dedicated to documenting
anything and everything I learn that is interesting or remotely related to my project.</summary></entry><entry><title>Easy sharing of SSH keys</title><link href="http://www.varstack.com/2016/04/27/SSH-keys/" rel="alternate" type="text/html" title="Easy sharing of SSH keys" /><published>2016-04-27T00:00:00+05:30</published><updated>2016-04-27T00:00:00+05:30</updated><id>http://www.varstack.com/2016/04/27/SSH-keys</id><content type="html" xml:base="http://www.varstack.com/2016/04/27/SSH-keys/">&lt;p&gt;This tip may be obvious to many people, but I feel this worth mentioning. A lot of us
have SSH keys set up for github. I found out today, from a friend (github/sakshamsharma)
that you can actually share your public keys with others by giving them your github
username.
For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://github.com/pallavagarwal07.keys &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would give me ssh/scp access to your PC.&lt;/p&gt;</content><category term="tip" /><summary>This tip may be obvious to many people, but I feel this worth mentioning. A lot of us
have SSH keys set up for github. I found out today, from a friend (github/sakshamsharma)
that you can actually share your public keys with others by giving them your github
username.
For example,</summary></entry><entry><title>Linux commands every user should master</title><link href="http://www.varstack.com/2015/12/12/Linux-commands-every-user-should-master/" rel="alternate" type="text/html" title="Linux commands every user should master" /><published>2015-12-12T00:00:00+05:30</published><updated>2015-12-12T00:00:00+05:30</updated><id>http://www.varstack.com/2015/12/12/Linux-commands-every-user-should-master</id><content type="html" xml:base="http://www.varstack.com/2015/12/12/Linux-commands-every-user-should-master/">&lt;p&gt;When it comes to linux, there are some commands that you can&#39;t live without and
then there are some you &lt;em&gt;shouldn&#39;t&lt;/em&gt; live without. I mean sure, you can live your
life without ever using &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; but you&#39;d never believe how much
productive knowing a few more terminal commands can make you.&lt;/p&gt;

&lt;p&gt;Here is a list of the commands we are going to take a look at:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;man&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;grep&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;find&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sed&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;The command that started it all: &lt;em&gt;man&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I really hope you know this one. But in case you don&#39;t, well today is your
lucky day. This command is really special because it will, from today onwards
be your first guide to using &lt;strong&gt;any&lt;/strong&gt; terminal command. &lt;code&gt;man&lt;/code&gt; stands for
&lt;em&gt;manual&lt;/em&gt; and is literally your handbook of linux commands. Any time you are
wondering how to use a command, &lt;code&gt;sed&lt;/code&gt; for example, open up your terminal and
type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or as in this case,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man sed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it will give you a quick summary of what the command is, and how to use
it. There isn&#39;t anything more than that to it, yet I use it multiple times
everyday when I forget the syntax of &lt;code&gt;chmod&lt;/code&gt; command or have forgotten how
the &lt;code&gt;bash time&lt;/code&gt; command is different from that packaged with &lt;code&gt;zsh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Search through files, content, outputs, basically anything: &lt;em&gt;grep&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This one is basically a search command. But unlike the upcoming &lt;code&gt;find&lt;/code&gt; command,
this one doesn&#39;t search for just the names of files. It searches through their
content as well. Not only that, it is also super handy when you have to filter
out lines that contain some specific content from let&#39;s say a huge output from
previous command. This command takes getting some used to, but after some time,
you wouldn&#39;t even believe you used to be able to get any work without it. Let&#39;s
start, shall we?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content from files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s say you want to search for any files in which you have TODO written
inside (as in code comments maybe?) also, you want the search to be case
insensitive and search all subfolders of current folder too (recursively).
You&#39;d write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep -i -r TODO .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I suggest you look up the flags (those dash followed by characters) I
used in the above command using &lt;code&gt;man grep&lt;/code&gt;. I will still tell you in case
you don&#39;t have a means to run the &lt;code&gt;man&lt;/code&gt; command right now.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; flag is for case-insensistive search.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-r&lt;/code&gt; searches sub-folders recursively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; is the phrase we want to search for. You can even use regex
expressions (which is where the true power lies), and that seems to be true
for many linux commands you&#39;ll learn in future.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt; is the usual symbol for current directory. &lt;code&gt;..&lt;/code&gt; can be used for parent
directory, or a directory name can be given, relative to the current
directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content from stdin or &lt;em&gt;pipe&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the last parameter &lt;code&gt;file or folder name to search&lt;/code&gt; in previous command
is not provided, then &lt;code&gt;grep&lt;/code&gt; tries to search in &lt;code&gt;stdin&lt;/code&gt;. Now, that doesn&#39;t
mean you actually have to type the content, but being able to take content
from stdin allows grep to use something much more useful in linux - &lt;strong&gt;pipes&lt;/strong&gt;!
What a pipe or &lt;code&gt;|&lt;/code&gt; does is that it sends the output of one command as stdin
to another. Thus, a command like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls | grep -i txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will execute &lt;code&gt;ls&lt;/code&gt; and then take that output and give it to &lt;code&gt;grep&lt;/code&gt;. Now grep
will execute its search on this content (output of &lt;code&gt;ls&lt;/code&gt;). Thus, in above
example, it will search for lines that will have txt in them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;The plain old but much more powerful than you thought &lt;em&gt;find&lt;/em&gt; command&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command is one of the most used commands in Linux.
&lt;code&gt;find&lt;/code&gt; command is used to search and locate list of files and directories
matching arguments you specify.  &lt;code&gt;find&lt;/code&gt; can be used in variety of conditions
with its various flags to find files by permissions, users, groups, file type,
date, size and other possible criteria.  The format for the &lt;code&gt;find&lt;/code&gt; command is a
little unintuitive for those with a habit of using &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;ag&lt;/code&gt;. Like always,
I&#39;d advice you to read the man page for &lt;code&gt;find&lt;/code&gt; using &lt;code&gt;man find&lt;/code&gt; command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Files by their name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To find a file by its name, just use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find &amp;lt;directory&amp;gt; -name &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, if you want to search for a file named &lt;code&gt;abc.txt&lt;/code&gt; in current directory, you
can do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name &quot;abc.txt&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name &quot;*.txt&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to find all files ending with &lt;code&gt;.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that the only compulsory argument is the directory name. The &lt;code&gt;-name&lt;/code&gt; is
just to filter the files by name. And as you may have guessed, there are a lot
more filters at your disposal.
This will also search all sub-directories in the current folder recursively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Files using advanced filters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s look at the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find -maxdepth 4 -amin +3 -iname &quot;PaLLaV&quot; -size -4M -type f -user root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example of how multiple filters can be chained up to create an
advanced search.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-maxdepth 4&lt;/code&gt; will go at max 4 levels down (in
subdirectories) while searching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-amin +3&lt;/code&gt; will keep only those files that were last accessed &lt;strong&gt;more than&lt;/strong&gt;
3 minutes ago (notice the &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;+3&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-iname &quot;PaLLaV&quot;&lt;/code&gt; will search for files with name &lt;code&gt;pallav&lt;/code&gt; WITHOUT caring
about case sensitivity (&lt;code&gt;-name&lt;/code&gt; would&#39;ve been case sensitive).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-size -4M&lt;/code&gt; will only choose those results that are &lt;strong&gt;less than&lt;/strong&gt; 4MegaBytes
because of &lt;code&gt;-&lt;/code&gt; in &lt;code&gt;-4M&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-type f&lt;/code&gt; will filter out the files and ignore the directories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-user root&lt;/code&gt; will only give out the files that are owned by &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As you may have guessed, these are &lt;em&gt;not&lt;/em&gt; the only filters you can use. There are
actually tons more. You can literally phrase the command to find any file you
lost on your hard drive and only remember vague details about.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;The stream editor with all powers of an editor: &lt;em&gt;sed&lt;/em&gt; &lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I know I promised you a tutorial of &lt;em&gt;sed&lt;/em&gt;, but the fact is, there is no way I
can do justice to its power in a few paragraphs. So, instead I&#39;m going to refer
you to &lt;a href=&quot;http://www.grymoire.com/Unix/Sed.html#uh-0&quot;&gt;this&lt;/a&gt; tutorial. It&#39;s long,
but I really recommend you go through the starting parts. &lt;em&gt;sed&lt;/em&gt; has terrible
documentation and &lt;code&gt;man sed&lt;/code&gt; doesn&#39;t help a lot in this case, because just
knowing the format of commands doesn&#39;t bring out its power at all. If you aren&#39;t
sold yet, I&#39;ll give you an easy example of &lt;code&gt;sed&lt;/code&gt; usage. Let&#39;s say you ran
&lt;code&gt;ifconfig&lt;/code&gt; and got the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enp9s0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 172.24.8.63  netmask 255.255.255.255  broadcast 172.24.8.63
        inet6 fe80::f276:1cff:fe0b:b377  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether f0:76:1c:0b:b3:77  txqueuelen 1000  (Ethernet)
        RX packets 2578393  bytes 3323277819 (3.0 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1368479  bytes 189953405 (181.1 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;
        loop  txqueuelen 0  (Local Loopback)
        RX packets 529  bytes 1361550 (1.2 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 529  bytes 1361550 (1.2 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but you just want the output to be type followed by ip addr, for every ip
address as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; inet 172.24.8.63
 netmask 255.255.255.255
 broadcast 172.24.8.63

 inet 127.0.0.1
 netmask 255.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&#39;s try to make the output like that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First grep to filter out the lines that have IP addresses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig | grep -P &quot;(\d{1,3}\.){3}\d{1,3}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Couple of things to note: The &lt;code&gt;-P&lt;/code&gt; is for using perl type regex.
This allows us to use &lt;code&gt;\d&lt;/code&gt; for digits, in sed we&#39;ll still have to
use &lt;code&gt;[0-9]&lt;/code&gt; as &lt;code&gt;\d&lt;/code&gt; format isn&#39;t supported. Then we say that there
will be atleast 1 and at most 3 digits &lt;code&gt;{1,3}&lt;/code&gt;. Then it will be
followed by a dot &lt;code&gt;\.&lt;/code&gt;. Read up on regex if you don&#39;t know why the
dot has been preceded by a &lt;code&gt;\&lt;/code&gt;. Then this whole group (digits and dot)
is repeated exactly 3 times, followed by another group of 1-3 digits.&lt;/p&gt;

&lt;p&gt;This filters out the lines with IP addresses as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    inet 172.24.8.63  netmask 255.255.255.255  broadcast 172.24.8.63
    inet 127.0.0.1  netmask 255.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we use sed to add newlines after every IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -r &quot;s|([0-9]{1,3}\.){3}[0-9]{1,3}|\0\n|g&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the &lt;code&gt;-r&lt;/code&gt; is to use extended regular expressions. &lt;code&gt;s&lt;/code&gt; is for
substitute command. &lt;code&gt;|&lt;/code&gt; is the separator (can be anything not used
in the substitution pattern). This is followed by the same regex
expression as before, but instead of &lt;code&gt;\d&lt;/code&gt; we have used &lt;code&gt;[0-9]&lt;/code&gt; as
&lt;code&gt;\d&lt;/code&gt; isn&#39;t supported by &lt;code&gt;sed&lt;/code&gt;. Then we use another separator &lt;code&gt;|&lt;/code&gt;.
Then we have the substitution content. &lt;code&gt;\0&lt;/code&gt; just puts the whole
pattern that was matched. This is needed as we do not want to delete
the original content. The &lt;code&gt;\n&lt;/code&gt; is for a newline. The &lt;code&gt;|g&lt;/code&gt; is another
separator followed by &lt;code&gt;global&lt;/code&gt; without which only the first match in
every line will be replaced. Now the output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        inet 172.24.8.63
  netmask 255.255.255.255
  broadcast 172.24.8.63

        inet 127.0.0.1
  netmask 255.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, the formatting doesn&#39;t look too good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let&#39;s add a new sed command to eat all the beginning spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -r &quot;s|^ *||&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one&#39;s easy, by using &lt;code&gt;^&lt;/code&gt;, we are substituting for all the spaces
in the beginning of the line and replacing with nothing.
This gives us the final output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inet 172.24.8.63
netmask 255.255.255.255
broadcast 172.24.8.63

inet 127.0.0.1
netmask 255.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Note, our final command thus will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig | grep -P &quot;(\d{1,3}\.){3}\d{1,3}&quot; | sed -r
    &quot;s|([0-9]{1,3}\.){3}[0-9]{1,3}|\0\n|g&quot; | sed -r &quot;s|^ *||&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and while this might seem like too much work, think about how much you&#39;d
have to write if you were to create a script to do these transformations
using C++ or python. These commands allow creation of really clean and
compact scripts (&lt;em&gt;OK, maybe &lt;strong&gt;just&lt;/strong&gt; compact scripts&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, that you know the secrets, get cracking!&lt;/strong&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider sharing this article using the links below.&lt;/strong&gt;&lt;/p&gt;</content><category term="post" /><summary>When it comes to linux, there are some commands that you can&#39;t live without and
then there are some you shouldn&#39;t live without. I mean sure, you can live your
life without ever using grep or find but you&#39;d never believe how much
productive knowing a few more terminal commands can make you.</summary></entry><entry><title>Configuration Management in Linux</title><link href="http://www.varstack.com/2015/12/10/Configuration-Management-in-Linux/" rel="alternate" type="text/html" title="Configuration Management in Linux" /><published>2015-12-10T00:00:00+05:30</published><updated>2015-12-10T00:00:00+05:30</updated><id>http://www.varstack.com/2015/12/10/Configuration-Management-in-Linux</id><content type="html" xml:base="http://www.varstack.com/2015/12/10/Configuration-Management-in-Linux/">&lt;p&gt;You can&#39;t yourself a linux enthusiast if you&#39;ve never run into the problem
of sorting out your configuration files. All of your precious files like
&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt;, &lt;code&gt;.emacs&lt;/code&gt;, &lt;code&gt;.fonts&lt;/code&gt;, &lt;code&gt;.Xdefaults&lt;/code&gt; are some of
the ones that can take a lot of pain to customize from the ground up.&lt;/p&gt;

&lt;p&gt;Like most people, I started out by always backing up my important config files.
But the list soon got so huge that I started having trouble remebering which
files to back up, and to do it after every change.&lt;/p&gt;

&lt;p&gt;So, obviously, I moved on to the next obvious option, &lt;strong&gt;symlinks&lt;/strong&gt;! I started
to keep all my config files in a single folder and started to symlink them to
the places that they belonged to. I kept this up for a few months (mostly
because it didn&#39;t seem like any trouble) when I finally decided to change my
operating system. And the problem hit me. I already had over 50 configuration
files under version control and had no real way to put them in correct places in
the new OS. These files had accumulated over time and to put them back at
correct places was an endeavour I wasn&#39;t going to undertake.&lt;/p&gt;

&lt;p&gt;Now I tried to look for a tool that would help me manage and restore dotfiles
at will. A friend suggested using &lt;code&gt;vcsh&lt;/code&gt; and &lt;code&gt;mr&lt;/code&gt;. You can find the relevant
article &lt;a href=&quot;http://srijanshetty.in/technical/vcsh-mr-dotfiles-nirvana/&quot;&gt;here&lt;/a&gt;.
I would&#39;ve tried that too but it seemed too complicated to be an elegant way
to handle this problem. For one thing, I wanted a script that could be a part
of my dotfiles and not an external dependency. So as you might&#39;ve already
guessed, I started to plan out my own way to manage my dotfiles. So without
further ado, I present to you:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;&lt;em&gt;Config Management, the UNIX way:&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;First things first, &lt;a href=&quot;https://github.com/pallavagarwal07/ConfigManagement&quot;&gt;here&lt;/a&gt;
is the repository for my project. The configuration system is inspired by
VIM&#39;s modelines, which are basically comments that can control VIM&#39;s settings
separately for code files. So, something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// vim: set nonumbers:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in a source code&#39;s top or bottom lines would turn off line numbering in VIM
when opening that source file. This is elegant as every config file has some
comment system (and isn&#39;t worth using if it doesn&#39;t) and file properties can
be easily specified in this way for every file.&lt;/p&gt;

&lt;p&gt;Let&#39;s look at the file structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myconfig
    ├── backup
    │   ├── 2015-11-30_13-46-31
    │   └── ........
    ├── configs
    │   ├── nvimrc
    │   ├── Xdefaults
    │   └── ........
    ├── configure.py
    └── current_state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the initial setup, you are only concerned with &lt;code&gt;configure.py&lt;/code&gt;, and the
folder &lt;code&gt;configs&lt;/code&gt;. An empty &lt;code&gt;current_state&lt;/code&gt; file may be needed. Your dotfiles
and config folders go inside &lt;code&gt;configs&lt;/code&gt; folder. The files can have any name
and do not need to be named the same as the final target. For eg. &lt;code&gt;.vimrc&lt;/code&gt;
when kept inside the &lt;code&gt;configs&lt;/code&gt; folder can be named &lt;code&gt;mysuperamazingvimconfig&lt;/code&gt;
and it won&#39;t matter. You can also group files of similar purpose together
as the files will be searched recursively.&lt;/p&gt;

&lt;p&gt;Now how do the files know where to go? Here is the easy part. Inside the
corrsponding file, you just mention where that files need to go. So, for
your &lt;code&gt;mysuperamazingvimconfig&lt;/code&gt;, you will have the following in your source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot; place &#39;&#39;~/.vimrc&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first double quote is to start a comment and the rest is the needed command.
Please note that the path is enclosed by a pair of &lt;code&gt;two single quotes&lt;/code&gt; not a
double quote. Also, this comment will be looked for in the top 3 and the bottom
3 lines of the source code.&lt;/p&gt;

&lt;p&gt;Another alternative for the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot; place &amp;amp;~/.vimrc&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;especially if the file has a special meaning for the single quote (like
&lt;code&gt;.Xdefaults&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;What about the folders?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the folder that need to be symlinked, you create a file named folder_config
inside the folder and put the same command as above. If the folder itself is
being symlinked, then it won&#39;t be checked further for symlinkable files/folders.
The rest of the folders, obviously will still be. For example, if you have a
folder named fonts in &lt;code&gt;configs&lt;/code&gt; and you want to place it as &lt;code&gt;~/.fonts&lt;/code&gt;, you will
make a file &lt;code&gt;folder_config&lt;/code&gt; inside &lt;code&gt;fonts&lt;/code&gt; folder with the content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;place &#39;&#39;~/.fonts&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you are done. All you have to do to create/update the symlinks is run
&lt;code&gt;./configure.py&lt;/code&gt; or &lt;code&gt;python2 configure.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;&lt;em&gt;Under the Hood&lt;/em&gt;&lt;/strong&gt;:&lt;/h4&gt;

&lt;p&gt;A lot of cool stuff happens under under the hood to ensure that no data loss
occurs and no redundant files are created when &lt;code&gt;configure.py&lt;/code&gt; is executed.
Your current symlink status is stored in &lt;code&gt;current_status&lt;/code&gt; so that the next time
you change a &lt;code&gt;place &#39;&#39;&amp;lt;path&amp;gt;&#39;&#39;&lt;/code&gt;, the old symlink is deleted to prevent
redundancy. If you manually remove the file from configuration management and
place the real file in the actual place, then it will take care not to touch it
even if it was part of &lt;code&gt;current_status&lt;/code&gt;. While adding a file to config system
for first time, if the file at target path is not a symlink but a real file, it
is copied to the backups folder under current date and time before being
replaced by a symlink to prevent data loss.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider sharing this article using the links below.&lt;/strong&gt;&lt;/p&gt;</content><category term="post" /><summary>You can&#39;t yourself a linux enthusiast if you&#39;ve never run into the problem
of sorting out your configuration files. All of your precious files like
.bashrc, .zshrc, .vimrc, .emacs, .fonts, .Xdefaults are some of
the ones that can take a lot of pain to customize from the ground up.</summary></entry><entry><title>Introduction to Cimulator</title><link href="http://www.varstack.com/2015/10/06/Introduction-to-Cimulator/" rel="alternate" type="text/html" title="Introduction to Cimulator" /><published>2015-10-06T00:00:00+05:30</published><updated>2015-10-06T00:00:00+05:30</updated><id>http://www.varstack.com/2015/10/06/Introduction-to-Cimulator</id><content type="html" xml:base="http://www.varstack.com/2015/10/06/Introduction-to-Cimulator/">&lt;p&gt;Cimulator is a tool that can help you see you program in action. That means no more
mysterious floating point exceptions, no more hidden runtime errors. With Cimulator,
you can actually see your program run step by step and debug the errors as they occur.&lt;/p&gt;

&lt;p&gt;You can change the speed of the Simulation using the slider on the top left hand side,
or even pause the simulation altogether using the Pause button on the top right of the
screen. The reset button, just next to the Pause button can be used to stop a running
simulation, and reset everything. When the reset button is pressed, the gcc output of
the program is displayed in the output space.&lt;/p&gt;

&lt;p&gt;Once you are done with the coding part, enter the input in the input box.
The input box is a text area where the user can enter input for the program in the
ace editor, and as the input is read by the program, it gets highlighted in the box.
Once you start a simulation, the input box becomes non-editable.&lt;/p&gt;

&lt;p&gt;To start the simulation, press the submit button, which is below the input and output box,
upon completion of the coding part and the input part. The following scenarios could occur:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If gcc was unable to compile your program, it would display the gcc compile error&lt;/li&gt;
&lt;li&gt;If the output of gcc and output interpreter was the same, “Simulation made successfully”
is displayed, and simulation starts&lt;/li&gt;
&lt;li&gt;If the gcc output did not match because of runtime in the program&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The output box is a textbox where the output of the program gets displayed. The output
gets added to the box as an when a printf statement is encountered, not altogether. Every
time something new gets printed, the output box flashes green.&lt;/p&gt;

&lt;p&gt;When the program is running, the corresponding line of the code is highlighted
to provide a indication of where the simulation is, currently. When the code highlighting
hits a conditional (if statement), its colour changes to green or red depending on
whether the condition is evaluated to true or false (resp.).&lt;/p&gt;

&lt;p&gt;If an error is encountered during the execution of the program, a popup will denote
the error and the line in which the error was encountered will be highlighted in
the editor in the background.&lt;/p&gt;

&lt;p&gt;In case you encounter any bugs in Cimulator, please report them using the
Bug Report button on the bottom right.&lt;/p&gt;

&lt;p&gt;The following two videos should get you familiar with what to expect with
Cimulator (watch in HD).&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bx9V0sw_n-M&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/t0nSdXk-8Zw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;em&gt;Not a beginner? We have something for you too!&lt;/em&gt;&lt;/h4&gt;

&lt;div id=&quot;dropContent&quot;&gt;With the current implementation, the c file generated from your code
is stored inside the directory and run without any isolation. Thus, it can be used
to execute custom code and take control of the docker instance this project runs on.
Your task is to use this to your advantage to obtain the directory listing of the
folder the code file gets generated in. First two people to complete this
task will get a treat from me (Pallav Agarwal) in CCD :).&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</content><category term="post" /><summary>Cimulator is a tool that can help you see you program in action. That means no more
mysterious floating point exceptions, no more hidden runtime errors. With Cimulator,
you can actually see your program run step by step and debug the errors as they occur.</summary></entry></feed>
